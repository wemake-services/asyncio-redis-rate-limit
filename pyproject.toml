[build-system]
requires = ["poetry-core>=2.2"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "asyncio-redis-rate-limit"
description = "Rate limiter for async functions using Redis as a backend"
version = "1.1.0"
license = "MIT"
readme = "README.md"

authors = [
  "Nikita Sobolev <mail@sobolevn.me>"
]

repository = "https://github.com/wemake-services/asyncio-redis-rate-limit"

keywords = [
  "asyncio",
  "rate-limiter",
  "redis",
  "redis-py",
  "aioredis",
]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.urls]
"Funding" = "https://github.com/sponsors/wemake-services"

[tool.poetry.dependencies]
python = "^3.10"

redis = { version = ">=4.5,<7", optional = true }
# aioredis and python3.11 are not compatible:
aioredis = { version = ">=2.0", optional = true, python = "<3.11" }
typing-extensions = ">=3.10"

[tool.poetry.group.dev.dependencies]
mypy = "^1.18"
types-redis = "^4.6"
types-mock = "^5.0"

wemake-python-styleguide = "^1.4"
ruff = "^0.13"

pytest = "^8.3"
pytest-cov = "^7.0"
pytest-randomly = "^4.0"
pytest-asyncio = "^1.2"
pytest-freezegun = "^0.4"
pytest-repeat = "^0.9"
# Needed for `pytest` for some reason
setuptools = "*"

[tool.poetry.extras]
redis = ["redis"]
aioredis = ["aioredis"]
dev = ["redis", "aioredis"]


[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
preview = true
fix = true
target-version = "py310"
line-length = 80

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  # Allow asserts:
  "S101",
  # Allow async functions without `await` for tests:
  "RUF029",
]
